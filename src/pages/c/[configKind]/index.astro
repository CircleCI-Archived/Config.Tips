---
import type { InferGetStaticPropsType } from 'astro';
import {marked} from 'marked';
import { getCollection } from 'astro:content';
import Layout from '../../../layouts/Layout.astro';
import CodeWindow from '../../../components/CodeWindow/CodeWindow.astro';
import Card from '../../../components/UI/Card.astro';
import Link from '../../../components/Link.astro';
import Icon from 'astro-icon';
import BreadCrumb from '../../../components/Navigation/BreadCrumb.astro';
import type { BreadCrumbList } from '../../../components/Navigation/BreadCrumb.astro';

export async function getStaticPaths() {
    const configKinds = await getCollection("configKinds");
    const renderer = new marked.Renderer();

    // Custom render lists in the body
    renderer.list = (body, ordered) => {
      const type = ordered ? 'ol' : 'ul';
      const className = ordered ? 'list-decimal' : 'list-disc';

      return `
        <div class="text-left">
          <${type} class="${className} list-inside text-left">${body}</${type}>
        </div>`;
    };

    const paths = await Promise.all(configKinds.map(async (configKind) => {
        const allTips = await getCollection("tips");
        const tips = allTips.filter(tip => tip.data.kind.id === configKind.id);
        const htmlBody = marked(configKind.data.body, { renderer });
        return {
            params: { configKind: configKind.id },
            props: { configKind, tips, htmlBody },
        };
    }));

    return paths;
}

// Your type and props extraction remain unchanged.
type Props = InferGetStaticPropsType<typeof getStaticPaths>;
const { configKind, htmlBody, tips } = Astro.props;
const websiteBase = new URL(configKind.data.website).hostname

const breadCrumbList: BreadCrumbList = [
  {
    title: "Configs",
    href: "/c/",
  },
]
---
<Layout title={"Config.Tips - " + configKind.data.name} slug={`/c/${configKind.id}`} description={configKind.data.description} ogImage={`/c/${configKind.id}/${configKind.id}-og-image.png`}>
    <BreadCrumb breadCrumbList={breadCrumbList} />
		<div class="flex flex-col gap-4 w-full">
      <header class="flex flex-col md:flex-row gap-6">
        <div class="flex flex-grow flex-col items-center">
          <Icon name={configKind.data.logo} class="w-16 h-16" />
          <h1 class="whitespace-nowrap">{configKind.data.name}</h1>
          <ul>
            <li>
              <Link href={configKind.data.website} className='text-xs flex flex-row items-center hover:text-indigo-300 whitespace-nowrap'>
                <Icon name="mdi:globe" class="w-3 h-3 mr-1" /> <span>{websiteBase}</span>
              </Link>
            </li>
          </ul>
        </div>
        <div class="w-full text-center">
          <Fragment set:html={htmlBody} />
        </div>
      </header>
      <CodeWindow snippet={configKind.data.snippet.code} lang={configKind.data.snippet.lang} filePath={configKind.data.snippet.filePath} />
      <h2 class="text-xl font-bold text-gray-500 p-0">Tips</h2>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {tips.map(tip => (
          <Card href={`/c/${configKind.id}/${tip.slug}`} className="w-full shadow bg-zinc-800 border border-zinc-700 rounded p-2 hover:bg-indigo-300 text-gray-300 hover:text-gray-900 durarion-200">
            <h2 class="font-semibold ">{tip.data.title}</h2>
          </Card>
        ))}
      </div>
    </div>
</Layout>
