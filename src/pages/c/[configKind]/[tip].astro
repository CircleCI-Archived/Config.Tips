---
import type { InferGetStaticPropsType } from "astro";
import { getCollection } from "astro:content";
import Icon from "astro-icon";
import { marked } from "marked";
import { nanoid } from 'nanoid'
import * as shiki from "shiki";

import CodeWindow from "../../../components/CodeWindow/CodeWindow.astro";
import Link from "../../../components/Link.astro";
import type { BreadCrumbList } from "../../../components/Navigation/BreadCrumb.astro";
import BreadCrumb from "../../../components/Navigation/BreadCrumb.astro";
import SocialBar from "../../../components/UI/SocialBar.astro";
import Layout from "../../../layouts/Layout.astro";

export async function getStaticPaths() {
  function getContributor(profileURL?: string) {
    return {
      url: profileURL || "#",
      name: profileURL ? profileURL.split("/")[3] : "Anonymous",
      image: profileURL
        ? profileURL + ".png"
        : "/assets/images/gradient_460.png",
    };
  }

  async function renderMarkdown(markdown: string) {
    const highlighter = await shiki.getHighlighter({
      theme: "github-dark-dimmed",
    });
    const renderer = new marked.Renderer();
    renderer.code = (code, lang) => {
      const codeId = `C${nanoid(5)}`;
      const safeSnippet = encodeURIComponent(code);
      const tokens = highlighter.codeToThemedTokens(code, lang);
      const _theme = highlighter.getTheme();
      const html = shiki.renderToHtml(tokens, {
        themeName: _theme.name,
        fg: _theme.fg,
        bg: "transparent",
        elements: {
          pre({ className, children }) {
            // Swap to `code` tag if inline
            // Replace "shiki" class naming with "astro-code"
            className = className.replace(/shiki/g, "code-window");
            return `<pre class="${className}" tabindex="0">${children}</pre>`;
          },
          code({ children }) {
            return `<code id="${codeId}-code" data-rawSnippet="${safeSnippet}">${children}</code>`;
          },
        },
      });
      return `<div class="rounded-md px-2 bg-gray-800 w-full overflow-x-auto"><pre><code class="language-${lang}">${html}</code></pre></div>`;
    };
    return marked(markdown, { renderer });
  }

  const configKinds = await getCollection("configKinds");
  const tips = await getCollection("tips");
  return tips.map((tip) => {
    const configKind = configKinds.find((kind) => kind.id === tip.data.kind.id);
    if (!configKind) {
      throw new Error(`Config kind not found for tip ${tip.id}`);
    }
    return {
      params: {
        configKind: configKind.id,
        tip: tip.slug,
      },
      props: {
        configType: configKind.data,
        title: tip.data.title,
        description: tip.data.description,
        body: renderMarkdown(tip.body),
        snippet: tip.data.snippet,
        lang: configKind.data.snippet.lang,
        slug: tip.slug,
        configKind,
        contributor: getContributor(tip.data.contributor),
      },
    };
  });
}
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

const {
  configType,
  title,
  description,
  body,
  snippet,
  lang,
  slug,
  configKind,
  contributor,
} = Astro.props as Props;

const breadCrumbList: BreadCrumbList = [
  {
    title: "Configs",
    href: "/c/",
  },
  {
    title: configKind.data.name,
    href: `/${configKind.id}`,
  },
];
---

<Layout
  title={`Config.Tips - ${configType.name}: ${title}`}
  slug={`${configKind.id}/${slug}`}
  description={description}
  ogImage={`/c/${configKind.id}/${slug}/${slug}-og-image.png`}
>
  <BreadCrumb breadCrumbList={breadCrumbList} />
  <article class="flex flex-col">
    <div class="flex flex-col md:flex-row flex-wrap gap-4">
      <section class="flex-1 min-w-0 w-full md:w-1/2">
        <h1 class="text-3xl font-bold">{title}</h1>
        <div set:html={body} />
      </section>
      <section class="flex flex-col flex-1 w-full min-w-0 md:w-1/2">
        <CodeWindow
          snippet={snippet}
          lang={lang}
          filePath={configType.snippet.filePath}
        />
        <div
          class="flex flex-col justify-center items-center border border-gray-800 rounded p-1 mt-2"
        >
          <h2 class="text-md p-0 text-gray-500">Share this tip</h2>
          <SocialBar contentTitle={title} />
        </div>
      </section>
    </div>
    <footer class="flex flex-col gap-2 mt-2 text-sm text-gray-500">
      <section>
        <h2 class="text-gray-500 font-medium">Contributor:</h2>
        <figure class="inline-block">
          <Link
            href={contributor.url}
            className="flex flex-row items-center gap-2 hover:text-indigo-300 duration-150 pr-2"
          >
            <img
              src={contributor.image}
              alt="Contributor profile avatar"
              class="w-8 h-8 rounded-full"
            />
            <figcaption>{contributor.name}</figcaption>
          </Link>
        </figure>
      </section>
      <section>
        <Link
          href={`https://github.com/CircleCI-Public/Config.Tips/tree/main/src/content/tips/${slug}.md`}
          className="text-xs hover:text-indigo-300 duration-150"
        >
          <Icon name="mdi:edit" class="inline-block w-3 h-3 mr-1" /> edit this
          page
        </Link>
      </section>
    </footer>
  </article>
</Layout>
